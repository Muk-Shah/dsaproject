#include <iostream>
#include <vector>
#include <unordered_map>
#include <limits>
#include <queue>
#include <chrono>

using namespace std;

class Graph {
public:
    unordered_map<int, vector<pair<int, double>>> graph;

    void addEdge(int u, int v, double weight) {
        graph[u].push_back({v, weight});
    }

    unordered_map<int, double> dijkstra(int source) {
        unordered_map<int, double> distances;
        for (const auto& node : graph) {
            distances[node.first] = numeric_limits<double>::infinity();
        }
        distances[source] = 0;

        priority_queue<pair<double, int>, vector<pair<double, int>>, greater<pair<double, int>>> pq;
        pq.push({0, source});

        while (!pq.empty()) {
            double current_distance = pq.top().first;
            int current_node = pq.top().second;
            pq.pop();

            if (current_distance > distances[current_node]) {
                continue;
            }

            for (const auto& neighbor : graph[current_node]) {
                int neighbor_node = neighbor.first;
                double weight = neighbor.second;
                double distance = current_distance + weight;

                if (distance < distances[neighbor_node]) {
                    distances[neighbor_node] = distance;
                    pq.push({distance, neighbor_node});
                }
            }
        }

        return distances;
    }

    unordered_map<int, double> bellmanFord(int source) {
        unordered_map<int, double> distances;
        for (const auto& node : graph) {
            distances[node.first] = numeric_limits<double>::infinity();
        }
        distances[source] = 0;

        for (size_t i = 0; i < graph.size() - 1; ++i) {
            for (const auto& node : graph) {
                int u = node.first;
                for (const auto& neighbor : node.second) {
                    int v = neighbor.first;
                    double weight = neighbor.second;
                    if (distances[u] + weight < distances[v]) {
                        distances[v] = distances[u] + weight;
                    }
                }
            }
        }

        // Check for negative-weight cycles
        for (const auto& node : graph) {
            int u = node.first;
            for (const auto& neighbor : node.second) {
                int v = neighbor.first;
                double weight = neighbor.second;
                if (distances[u] + weight < distances[v]) {
                    throw runtime_error("Graph contains a negative-weight cycle");
                }
            }
        }

        return distances;
    }
};

// Function to hardcode graph data
Graph createSampleGraph() {
    Graph graph;
    graph.addEdge(0, 1, 4);
    graph.addEdge(0, 2, 1);
    graph.addEdge(2, 1, 2);
    graph.addEdge(2, 3, 5);
    graph.addEdge(1, 3, 1);
    graph.addEdge(3, 4, 3);
    return graph;
}

// Function to compare the performance of the algorithms
void compareAlgorithms(Graph& graph, int source) {
    auto start = chrono::high_resolution_clock::now();
    unordered_map<int, double> dijkstraDistances = graph.dijkstra(source);
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double> dijkstraTime = end - start;
    cout << "Dijkstra's Algorithm: " << dijkstraTime.count() << " seconds" << endl;

    start = chrono::high_resolution_clock::now();
    unordered_map<int, double> bellmanFordDistances = graph.bellmanFord(source);
    end = chrono::high_resolution_clock::now();
    chrono::duration<double> bellmanFordTime = end - start;
    cout << "Bellman-Ford Algorithm: " << bellmanFordTime.count() << " seconds" << endl;
}

// Example usage
int main() {
    Graph graph = createSampleGraph();
    int source_node = 0;  // Change this to your source node
    compareAlgorithms(graph, source_node);

    return 0;
}
